ns: test
preamble: |
  The `test` namespace contains some simple functions to help validate
  assumptions and can cause template generation to fail in specific cases.
funcs:
  - name: test.Assert
    alias: assert
    description: |
      Asserts that the given expression or value is `true`. If it is not, causes
      template generation to fail immediately with an optional message.
    pipeline: true
    arguments:
      - name: message
        required: false
        description: The optional message to provide in the case of failure
      - name: value
        required: true
        description: The value to test
    examples:
      - |
        $ gomplate -i '{{ assert (eq "foo" "bar") }}'
        template: <arg>:1:3: executing "<arg>" at <assert (eq "foo" "ba...>: error calling assert: assertion failed
        $ gomplate -i '{{ assert "something horrible happened" false }}'
        template: <arg>:1:3: executing "<arg>" at <assert "something ho...>: error calling assert: assertion failed: something horrible happened
  - name: test.Fail
    alias: fail
    description: |
      Cause template generation to fail immediately, with an optional message.
    pipeline: true
    arguments:
      - name: message
        required: false
        description: The optional message to provide
    examples:
      - |
        $ gomplate -i '{{ fail }}'
        template: <arg>:1:3: executing "<arg>" at <fail>: error calling fail: template generation failed
        $ gomplate -i '{{ test.Fail "something is wrong!" }}'
        template: <arg>:1:7: executing "<arg>" at <test.Fail>: error calling Fail: template generation failed: something is wrong!
  - name: test.Required
    alias: required
    description: |
      Passes through the given value, if it's non-empty, and non-`nil`. Otherwise,
      exits and prints a given error message so the user can adjust as necessary.

      This is particularly useful for cases where templates require user-provided
      data (such as datasources or environment variables), and rendering can not
      continue correctly.

      This was inspired by [Helm's `required` function](https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md#know-your-template-functions),
      but has slightly different behaviour. Notably, gomplate will always fail in
      cases where a referenced _key_ is missing, and this function will have no
      effect.
    pipeline: true
    arguments:
      - name: message
        required: false
        description: The optional message to provide when the required value is not provided
      - name: value
        required: true
        description: The required value
    examples:
      - |
        $ FOO=foobar gomplate -i '{{ getenv "FOO" | required "Missing FOO environment variable!" }}'
        foobar
        $ FOO= gomplate -i '{{ getenv "FOO" | required "Missing FOO environment variable!" }}'
        error: Missing FOO environment variable!
      - |
        $ cat <<EOF> config.yaml
        defined: a value
        empty: ""
        EOF
        $ gomplate -d config=config.yaml -i '{{ (ds "config").defined | required "The `config` datasource must have a value defined for `defined`" }}'
        a value
        $ gomplate -d config=config.yaml -i '{{ (ds "config").empty | required "The `config` datasource must have a value defined for `empty`" }}'
        template: <arg>:1:25: executing "<arg>" at <required "The `confi...>: error calling required: The `config` datasource must have a value defined for `empty`
        $ gomplate -d config=config.yaml -i '{{ (ds "config").bogus | required "The `config` datasource must have a value defined for `bogus`" }}'
        template: <arg>:1:7: executing "<arg>" at <"config">: map has no entry for key "bogus"
  - name: test.Ternary
    alias: ternary
    description: |
      Returns one of two values depending on whether the third is true. Note that the third value does not have to be a boolean - it is converted first by the [`conv.ToBool`](../conv/#conv-tobool) function (values like `true`, `1`, `"true"`, `"Yes"`, etc... are considered true).

      This is effectively a short-form of the following template:

      ```
      {{ if conv.ToBool $condition }}{{ $truevalue }}{{ else }}{{ $falsevalue }}{{ end }}
      ```

      Keep in mind that using an explicit `if`/`else` block is often easier to understand than ternary expressions!
    pipeline: true
    arguments:
      - name: truevalue
        required: true
        description: the value to return if `condition` is true
      - name: falsevalue
        required: true
        description: the value to return if `condition` is false
      - name: condition
        required: true
        description: the value to evaluate for truthiness
    examples:
      - |
        $ gomplate -i '{{ ternary "FOO" "BAR" false }}'
        BAR
        $ gomplate -i '{{ ternary "FOO" "BAR" "yes" }}'
        FOO
